@page "/todos"

<h1 class="text-lg font-extrabold text-red-800">To Do List</h1>

<EditForm Model="@newTodo" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label for="title">Title:</label>
        <InputText @bind-Value="newTodo.Title"/>
    </div>

    <div>
        <label for="description">Description:</label>
        <InputText @bind-Value="newTodo.Description"/>
    </div>

    <div>
        <label for="status">Status:</label>
        <InputSelect @bind-Value="newTodo.Status">
        <option value="Pending">Pending</option>
        <option value="OnGoing">OnGoing</option>
        <option value="Closed">Closed</option>
        </InputSelect>
    </div>

    <div>
        <label for="priority">Priority</label>
        <InputSelect @bind-Value="newTodo.Priority">
            <option value="Minor">Minor</option>
            <option value="Major">Major</option>
            <option value="Urgent">Urgent</option>
        </InputSelect>
    </div>
    <button class="" type="submit">Add</button>
</EditForm>

<h3 class="text-lg font-bold text-gray-800">You have @todos.Count(t => t.Status == TodoStatus.Pending || t.Status == TodoStatus.OnGoing) task(s) to do.</h3>
<ul>
        @foreach (var todo in todos) {
            <li class="flex justify-between items-center py-2">
               @if(todo.Status == TodoStatus.Closed) {
                    <span class="line-through text-green-500">@todo.Title</span>
               } else {
                    <input type="checkbox" @onclick="()=>MarkAsCompleted(todo)" class="mr-2"/>
                    <span class="text-sm font-medium @((todo.Status == TodoStatus.Pending) ? "text-red-500" : "text-orange-500")">@todo.Title</span>
               }

               @if(!string.IsNullOrWhiteSpace(todo.Description)) {
                    <p class="ml-5 text-sm text-gray-500">@todo.Description</p>
               }
               <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded" @onclick="()=>RemoveTodo(todo)">Delete</button>
            </li>
            
        }
</ul>

@code {
    public Todo newTodo = new Todo();
    public List<Todo> todos = new();
    
    public void HandleValidSubmit() {
        todos.Add(new Todo() {
            Title = newTodo.Title,
            Description = newTodo.Description, 
            Status = newTodo.Status, 
            Priority = newTodo.Priority
        });
    }

    public void MarkAsCompleted(Todo todo) {
        todo.Status = TodoStatus.Closed;
    }

    public void RemoveTodo(Todo todo) {
        todos.Remove(todo);
    }


}